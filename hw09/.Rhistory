options(scipen = 1, digits = 4, width = 80)
plot_fitted_resid = function(model, pointcol = "blue", linecol = "orange") {
plot(fitted(model), resid(model),
col = pointcol,
pch = 20,
cex = 1.5,
xlab = "Fitted",
ylab = "Residuals")
abline(h = 0, col = linecol, lwd = 2)
}
Q_Q_plot = function(model, pointcol, linecol) {
qqline(fitted(model), resid(model),
col = pointcol,
pch = 20,
cex = 1,
xlab = "Fitted",
ylab = "Residuals")
}
Q_Q_plot = function(model, pointcol, linecol) {
qqnorm(resid(model),
col = pointcol,
pch = 20,
cex = 1)
qqline(resid(fit),
col = linecol,
lwd = 2)
}
fitted_vs_resid = function(model, pointcol = "blue", linecol = "orange") {
plot(fitted(model), resid(model),
col = pointcol,
pch = 20,
cex = 1,
xlab = "Fitted",
ylab = "Residuals")
abline(h = 0, col = linecol, lwd = 2)
}
Q_Q_plot = function(model, pointcol = "blue", linecol = "orange") {
qqnorm(resid(model),
col = pointcol,
pch = 20,
cex = 1)
qqline(resid(fit),
col = linecol,
lwd = 2)
}
set.seed(114)
test_data = data.frame(x = runif(n = 20, min = 0, max = 10),
y = rep(x = 0, times = 20))
test_data$y = with(test_data, 5 + 2 * x + rnorm(n = 20))
test_fit = lm(y ~ x, data = test_data)
set.seed(114)
test_data = data.frame(x = runif(n = 20, min = 0, max = 10),
y = rep(x = 0, times = 20))
test_data$y = with(test_data, 5 + 2 * x + rnorm(n = 20))
test_fit = lm(y ~ x, data = test_data)
fitted_vs_resid(test_fit)
Q_Q_plot(test_fit)
Q_Q_plot = function(model, pointcol = "blue", linecol = "orange") {
qqnorm(resid(model),
col = pointcol,
pch = 20,
cex = 1)
qqline(resid(model),
col = linecol,
lwd = 2)
}
fitted_vs_resid(test_fit)
Q_Q_plot(test_fit)
model = lm(Fertility ~ ., data = swiss)
coef(model)
plot_fitted_resid(model)
fitted_vs_resid(model)
fitted_vs_resid(model)
library(lmtest)
bptest(model)
fitted_vs_resid(model)
library(lmtest)
bptest(model)
fitted_vs_resid(model)
library(lmtest)
bptest(model)
options(scipen = 1, digits = 4, width = 80)
fitVresPlot(add)
bptest(add)
add = lm(Fertility~.,data=swiss)
coef(add)
bptest(add)
fitted_vs_resid(model)
library(lmtest)
bptest(model)
Q_Q_plot(model)
Q_Q_plot(model)
shapiro.test(resid(model))
leverage = hatvalues(model)
leverag_mean = mean(swiss_mod_lev)
leverage = hatvalues(model)
leverag_mean = mean(leverag)
leverage = hatvalues(model)
leverag_mean = mean(leverag)
leverage = hatvalues(model)
leverag_mean = mean(leverage)
leverage[leverage > 2 * leverage_mean]
leverage = hatvalues(model)
leverage_mean = mean(leverage)
leverage[leverage > 2 * leverage_mean]
swiss[hatvalues(add) > 2 * mean(hatvalues(add)),]
cooks = cooks.distance(swiss_mod)
cooks = cooks.distance(model)
cooks[cooks > 4 / length(cooks)]
swiss[cooks.distance(add)>4 / length(cooks.distance(add)),]
swiss_data = cooks[cooks > 4 / length(cooks)]
add_model = lm(Fertility ~ ., data = swiss_data)
swiss_data = cooks[cooks > 4 / length(cooks)]
add_model = lm(Fertility ~ ., data = swiss_data)
swiss_data = cooks[cooks > 4 / length(cooks)]
swiss_data
add_model = lm(Fertility ~ ., data = swiss_data)
good_swiss=swiss[cooks.distance(add)<=4 / length(cooks.distance(add)),]
good_swiss
better_add = lm(Fertility~.,data=good_swiss)
coef(better_add)-coef(add)
swiss_data = swiss[cooks > 4 / length(cooks)]
swiss_data = swiss[cooks > 4 / length(cooks), ]
swiss_data
add_model = lm(Fertility ~ ., data = swiss_data)
(coef(model) - coef(add_model)) / coef(swiss_mod)
swiss_data = swiss[cooks > 4 / length(cooks), ]
swiss_data
add_model = lm(Fertility ~ ., data = swiss_data)
(coef(model) - coef(add_model)) / coef(model)
swiss_data = swiss[cooks > 4 / length(cooks), ]
swiss_data
add_model = lm(Fertility ~ ., data = swiss_data)
(coef(model) - coef(add_model))
swiss_data = swiss[cooks <= 4 / length(cooks), ]
swiss_data
add_model = lm(Fertility ~ ., data = swiss_data)
swiss_data = swiss[cooks <= 4 / length(cooks), ]
swiss_data
add_model = lm(Fertility ~ ., data = swiss_data)
(coef(model) - coef(add_model)) / coef(model)
swiss_data = swiss[cooks <= 4 / length(cooks), ]
swiss_data
add_model = lm(Fertility ~ ., data = swiss_data)
coef(model) - coef(add_model)
swiss_data = swiss[cooks <= 4 / length(cooks), ]
swiss_data
add_model = lm(Fertility ~ ., data = swiss_data)
coef(add_model) - coef(model)
influential = swiss[cooks.distance(add)>4/length(cooks.distance(add)),]
predict(add,newdata = influential)-predict(better_add,newdata = influential)
predict(add,newdata = influential)-influential$Fertility
predict(better_add,newdata = influential)-influential$Fertility
influential = swiss[cooks.distance(add)>4/length(cooks.distance(add)),]
predict(add,newdata = influential)-predict(better_add,newdata = influential)
predict(add,newdata = influential)-influential$Fertility
predict(better_add,newdata = influential)-influential$Fertility
no_swiss = swiss[cooks > 4 / length(cooks), ]
predict(model, no_swiss)
predict(add_model, no_swiss)
(predict(model, no_swiss) - predict(add_model, no_swiss))
concrete = read.csv("concrete.csv")
model = lm(strength ~ ., data = concrete)
bptest(model)
shapiro.test(resid(mod))
shapiro.test(resid(model))
sum(hatvalues(mod) > 2 * mean(hatvalues(mod)))
concrete = read.csv("concrete.csv")
mod = lm(strength~.,data=concrete)
sum(hatvalues(mod) > 2 * mean(hatvalues(mod)))
sum(abs(rstandard(mod)) > 2)
(hatvalues(mod) > 2 * mean(hatvalues(mod))
(hatvalues(model) > 2 * mean(hatvalues(model)))
leverage = hatvalues(model)
leverage_mean = mean(leverage)
leverage[leverage > 2 * leverage_mean]
leverage = hatvalues(model)
leverage_mean = mean(leverage)
leverage[leverage > 2 * leverage_mean] # No high leverage observation present
leverage = hatvalues(model)
leverage[leverage > 2 * mean(leverage)] # No high leverage observation present
leverage[hatvalues(model) > 2 * mean(leverage)] # No high leverage observation present
leverage[hatvalues(model) > 2 * mean(leverage)] # No high leverage observation present
leverage = hatvalues(model)
leverage_mean = mean(leverage)
leverage[leverage > 2 * mean(leverage)] # No high leverage observation present
leverage = hatvalues(model)
leverage_mean = mean(leverage)
leverage[leverage > 2 * leverage_mean] # No high leverage observation present
cooks = cooks.distance(model)
cooks[cooks > 4 / length(cooks)]
new_data = concrete[cooks > 4 / length(cooks), ]
new_model = lm(strength ~ ., data = concrete, subset = cd_mod <= 4 / length(cd_mod))
new_data = concrete[cooks > 4 / length(cooks), ]
new_model = lm(strength ~ ., data = concrete, subset = cooks <= 4 / length(cooks))
coef(mod_fix)-coef(mod)
new_data = concrete[cooks > 4 / length(cooks), ]
new_model = lm(strength ~ ., data = concrete, subset = cooks <= 4 / length(cooks))
coef(new_model)-coef(model)
new_data = concrete[cooks > 4 / length(cooks), ]
new_model = lm(strength ~ ., data = new_data)
new_data = concrete[cooks > 4 / length(cooks), ]
new_model = lm(strength ~ ., data = new_data)
new_data = concrete[cooks > 4 / length(cooks), ]
new_data
new_model = lm(strength ~ ., data = new_data)
new_data = concrete[cooks > 4 / length(cooks), ]
new_data
new_model = lm(strength ~ ., data = new_data)
new_data = concrete[cooks <= 4 / length(cooks), ]
new_data
new_model = lm(strength ~ ., data = new_data)
new_data = concrete[cooks <= 4 / length(cooks), ]
new_data
new_model = lm(strength ~ ., data = new_data)
coef(new_model) - coef(model)
mod_fix = lm(strength ~ ., data = concrete, subset = cd_mod <= 4 / length(cd_mod))
n = 50
set.seed(1)
x_1 = runif(n, 0, 10)
x_2 = runif(n, -5, 5)
y_1 = 2 + x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
fit_1 = lm(y_1 ~ x_1 + x_2)
qqnorm(resid(fit_1), col = "dodgerblue")
qqline(resid(fit_1), col = "darkorange", lwd = 2)
shapiro.test(resid(fit_1))
y_2 = 2 + x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit_2 = lm(y_2 ~ x_1 + x_2)
qqnorm(resid(fit_2), col = "dodgerblue")
qqline(resid(fit_2), col = "darkorange", lwd = 2)
shapiro.test(resid(fit_2))
num_sims = 1000
p_val_1 = rep(0, num_sims)
p_val_2 = rep(0, num_sims)
birthday = 19081014
set.seed(birthday)
for(i in 1:num_sims) {
y_1        = 2 + x_1 + 0 * x_2 + rnorm(n)
y_2        = 2 + x_1 + 0 * x_2 + rnorm(n, 0, abs(x_2))
fit_1      = lm(y_1 ~ x_1 + x_2)
fit_2      = lm(y_2 ~ x_1 + x_2)
p_val_1[i] = summary(fit_1)$coef[3,4]
p_val_2[i] = summary(fit_2)$coef[3,4]
}
mean(p_val_1 < 0.05)
mean(p_val_1 < 0.10)
mean(p_val_2 < 0.05)
mean(p_val_2 < 0.10)
mean(p_val_1<0.05)
mean(p_val_1<0.10)
mean(p_val_2<0.05)
mean(p_val_2<0.10)
for (i in 1:num_sims){
y_1 = 2 + x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = 1)
y_2 = 2 + x_1 + 0 * x_2 + rnorm(n = n, mean = 0, sd = abs(x_2))
fit1 = lm(y_1 ~ x_1 + x_2)
fit2 = lm(y_2 ~ x_1 + x_2)
p_val_1[i] = summary(fit1)$coefficients[3,4]
p_val_2[i] = summary(fit2)$coefficients[3,4]
}
mean(p_val_1<0.05)
mean(p_val_1<0.10)
mean(p_val_2<0.05)
mean(p_val_2<0.10)
