options(scipen = 1, digits = 4, width = 80)
options(scipen = 1, digits = 4, width = 80)
options(scipen = 1, digits = 4, width = 80)
options(scipen = 1, digits = 4, width = 80)
tv_mod_1 = lm(life ~ tv, data = tvdoctor)
library(faraway)
tv_mod_1 = lm(life ~ tv, data = tvdoctor)
plot(life ~ tv, data = tvdoctor, col = "blue", pch = 20, cex = 2)
abline(tv_mod_1, col = "orange", lwd = 2)
tv_mod_1 = lm(life ~ tv, data = tvdoctor)
plot(life ~ tv, data = tvdoctor, col = "blue", pch = 20, cex = 1)
abline(tv_mod_1, col = "orange", lwd = 2)
slr_model = lm(life ~ tv, data = tvdoctor)
plot(life ~ tv, data = tvdoctor, col = "blue", pch = 20, cex = 1)
abline(slr_model, col = "orange", lwd = 2)
slr_model = lm(life ~ tv, data = tvdoctor)
plot(life ~ tv, data = tvdoctor,
col = "blue",
pch = 20,
cex = 1)
abline(slr_model, col = "orange", lwd = 2)
plot_qq(slr_model)
slr_model = lm(life ~ tv, data = tvdoctor)
plot(life ~ tv, data = tvdoctor,
col = "blue",
pch = 20,
cex = 1)
abline(slr_model, col = "orange", lwd = 2)
load(plot_qq)
options(scipen = 1, digits = 4, width = 80)
fitted_vs_resid = function(model, pointcol = "blue", linecol = "orange") {
plot(fitted(model), resid(model),
col = pointcol,
pch = 20,
cex = 1,
xlab = "Fitted",
ylab = "Residuals")
abline(h = 0, col = linecol, lwd = 2)
}
Q_Q_plot = function(model, pointcol = "blue", linecol = "orange") {
qqnorm(resid(model),
col = pointcol,
pch = 20,
cex = 1)
qqline(resid(model),
col = linecol,
lwd = 2)
}
set.seed(114)
test_data = data.frame(x = runif(n = 20, min = 0, max = 10),
y = rep(x = 0, times = 20))
test_data$y = with(test_data, 5 + 2 * x + rnorm(n = 20))
test_fit = lm(y ~ x, data = test_data)
library(faraway)
library(lmtest)
slr_model = lm(life ~ tv, data = tvdoctor)
plot(life ~ tv, data = tvdoctor,
col = "blue",
pch = 20,
cex = 1)
abline(slr_model, col = "orange", lwd = 2)
plot_qq(slr_model)
slr_model = lm(life ~ tv, data = tvdoctor)
plot(life ~ tv, data = tvdoctor,
col = "blue",
pch = 20,
cex = 1)
abline(slr_model, col = "orange", lwd = 2)
par(mfrow=c(1,2))
hist(resid(life_fit),
xlab   = "Residuals",
main   = "Histogram of Residuals",
col    = "darkorange",
border = "dodgerblue")
par(mfrow=c(1,2))
hist(resid(slr_model),
xlab   = "Residuals",
main   = "Histogram of Residuals",
col    = "darkorange",
border = "dodgerblue")
qqnorm(resid(slr_model), main = "Normal Q-Q Plot", col = "darkorange")
qqline(resid(slr_model), col = "dodgerblue", lwd = 2)
qqnorm(resid(slr_model), main = "Normal Q-Q Plot", col = "darkorange")
qqline(resid(slr_model), col = "dodgerblue", lwd = 2)
qqnorm(resid(slr_model), main = "Normal Q-Q Plot", col = "darkorange", pch = 20)
qqline(resid(slr_model), col = "dodgerblue", lwd = 2)
qqnorm(resid(slr_model),
main = "Normal Q-Q Plot",
col = "orange",
pch = 20)
qqline(resid(slr_model),
col = "blue",
lwd = 2)
plot(fitted(slr_model), resid(slr_model),
col = pointcol,
pch = 20,
cex = 1,
xlab = "Fitted",
ylab = "Residuals")
plot(fitted(slr_model), resid(slr_model),
pch = 20,
cex = 1,
xlab = "Fitted",
ylab = "Residuals")
abline(h = 0, lwd = 2)
plot(fitted(slr_model), resid(slr_model),
col = blue,
pch = 20,
cex = 1,
xlab = "Fitted",
ylab = "Residuals")
plot(fitted(slr_model), resid(slr_model),
col = "blue",
pch = 20,
cex = 1,
xlab = "Fitted",
ylab = "Residuals")
abline(h = 0, lwd = 2)
plot(fitted(slr_model), resid(slr_model),
col = "orange",
pch = 20,
cex = 1,
xlab = "Fitted",
ylab = "Residuals")
abline(h = 0, col = "blue", lwd = 2)
qqnorm(resid(slr_model),
main = "Normal Q-Q Plot",
col = "orange",
pch = 20)
qqline(resid(slr_model),
col = "blue",
lwd = 2)
fitted_vs_resid(model)
model = lm(Fertility ~ ., data = swiss)
coef(model)
fitted_vs_resid(model)
library(lmtest)
bptest(model)
library(MASS)
min(mammals$body)
min(mammals$body)
max(mammals$body)
library(MASS)
view(MASS)
library(MASS)
View(MASS)
library(MASS)
MASS
library(MASS)
min(mammals$body)
max(mammals$body)
datasets::mammals
View(mammals)
min(mammals$body)
max(mammals$body)
min(mammals$body)
max(mammals$body)
min(mammals$brain)
max(mammals$brain)
plot(brain ~ body,
data = mammals,
main = "Brain Weight vs Body Weight, Data Scale",
xlab = "Body Weight",
ylab = "Brain Weight")
plot(brain ~ body,
data = mammals,
main = "Brain Weight vs Body Weight",
xlab = "Body Weight",
ylab = "Brain Weight")
plot(brain ~ body,
data = mammals,
main = "Brain Weight vs Body Weight",
xlab = "Body Weight",
ylab = "Brain Weight",
pch  = 20)
plot(brain ~ body,
data = mammals,
main = "Brain Weight vs Body Weight",
xlab = "Body Weight",
ylab = "Brain Weight",
pch  = 20,
col  = "orange")
plot(brain ~ body,
data = mammals,
main = "Brain Weight vs Body Weight",
xlab = "Body Weight",
ylab = "Brain Weight",
pch  = 20,
cex  = 1,
col  = "orange")
plot(brain ~ body,
data = mammals,
main = "Brain Weight vs Body Weight",
xlab = "Body Weight",
ylab = "Brain Weight",
pch  = 20,
cex  = 3,
col  = "orange")
plot(brain ~ body,
data = mammals,
main = "Brain Weight vs Body Weight",
xlab = "Body Weight",
ylab = "Brain Weight",
pch  = 20,
cex  = 0.5,
col  = "orange")
model = lm(brain ~ body, data = mammals)
Recall, *the log rule*: if the values of a variable range over more than one order of magnitude and the variable is strictly positive, then replacing the variable by its logarithm is likely to be helpful.
model = lm(brain ~ body, data = mammals)
summary(model)
model = lm(brain ~ body, data = mammals)
avona(model)
model = lm(brain ~ body, data = mammals)
anova(model)
options(scipen = 1, digits = 4, width = 80)
# Two functions from hw09
Q_Q_plot = function(model, pointcol = "blue", linecol = "orange") {
qqnorm(resid(model),
col = pointcol,
pch = 20,
cex = 1)
qqline(resid(model),
col = linecol,
lwd = 2)
}
fitted_vs_resid = function(model, pointcol = "blue", linecol = "orange") {
plot(fitted(model), resid(model),
col = pointcol,
pch = 20,
cex = 1,
xlab = "Fitted",
ylab = "Residuals")
abline(h = 0, col = linecol, lwd = 2)
}
options(scipen = 1, digits = 4, width = 80)
# Two functions from hw09
Q_Q_plot = function(model, pointcol = "blue", linecol = "orange") {
qqnorm(resid(model),
col = pointcol,
pch = 20,
cex = 1)
qqline(resid(model),
col = linecol,
lwd = 2)
}
fitted_vs_resid = function(model, pointcol = "blue", linecol = "orange") {
plot(fitted(model), resid(model),
col = pointcol,
pch = 20,
cex = 1,
xlab = "Fitted",
ylab = "Residuals")
abline(h = 0, col = linecol, lwd = 2)
}
options(scipen = 1, digits = 4, width = 80)
# Two functions from hw09
Q_Q_plot = function(model, pointcol = "blue", linecol = "orange") {
qqnorm(resid(model),
col = pointcol,
pch = 20,
cex = 1)
qqline(resid(model),
col = linecol,
lwd = 2)
}
fitted_vs_resid = function(model, pointcol = "blue", linecol = "orange") {
plot(fitted(model), resid(model),
col = pointcol,
pch = 20,
cex = 1,
xlab = "Fitted",
ylab = "Residuals")
abline(h = 0, col = linecol, lwd = 2)
}
options(scipen = 1, digits = 4, width = 80)
# Two functions from hw09
Q_Q_plot = function(model, pointcol = "blue", linecol = "orange") {
qqnorm(resid(model),
col = pointcol,
pch = 20,
cex = 1)
qqline(resid(model),
col = linecol,
lwd = 2)
}
fitted_vs_resid = function(model, pointcol = "blue", linecol = "orange") {
plot(fitted(model), resid(model),
col = pointcol,
pch = 20,
cex = 1,
xlab = "Fitted",
ylab = "Residuals")
abline(h = 0, col = linecol, lwd = 2)
}
options(scipen = 1, digits = 4, width = 80)
# Two functions from hw09
Q_Q_plot = function(model, pointcol = "blue", linecol = "orange") {
qqnorm(resid(model),
col = pointcol,
pch = 20,
cex = 1)
qqline(resid(model),
col = linecol,
lwd = 2)
}
fitted_vs_resid = function(model, pointcol = "blue", linecol = "orange") {
plot(fitted(model), resid(model),
col = pointcol,
pch = 20,
cex = 1,
xlab = "Fitted",
ylab = "Residuals")
abline(h = 0, col = linecol, lwd = 2)
}
Q_Q_plot(slr_model)
Q_Q_plot(slr_model)
qqnorm(resid(slr_model),
main = "Normal Q-Q Plot",
col = "orange",
pch = 20)
qqline(resid(slr_model),
col = "blue",
lwd = 2)
Q_Q_plot(slr_model)
fitted_vs_resid(slr_model)
fitted_vs_resid(model)
Q_Q_plot(model)
fit = lm(brain ~ log(body),
data = mammals)
boxcox(fit, lambda = seq(-0.10, 0.10, by = 0.001), plotit = T)
fit = lm(brain ~ log(body), data = mammals)
boxcox(fit, lambda = seq(-0.10, 0.10, by = 0.001), plotit = T)
model_log = lm(brain ~ log(body), data = mammals)
fitted_vs_resid(model_log)
boxcox(fit, lambda = seq(-0.10, 0.10, by = 0.001), plotit = T)
model_log = lm(brain ~ log(body), data = mammals)
fitted_vs_resid(model_log)
Q_Q_plot(model_log)
boxcox(fit, lambda = seq(-0.10, 0.10, by = 0.001), plotit = T)
model_log = lm(brain ~ log(body), data = mammals)
fitted_vs_resid(model_log)
Q_Q_plot(model_log)
boxcox(fit, lambda = seq(-0.25, 0.25, by = 0.05), plotit = TRUE)
model_log = lm(brain ~ log(body), data = mammals)
fitted_vs_resid(model_log)
Q_Q_plot(model_log)
boxcox(fit, lambda = seq(-0.3, 0.3, by = 0.05), plotit = TRUE)
model_log = lm(brain ~ log(body), data = mammals)
fitted_vs_resid(model_log)
Q_Q_plot(model_log)
boxcox(fit, lambda = seq(-0.2, 0.2, by = 0.05), plotit = TRUE)
model_log = lm(brain ~ log(body), data = mammals)
boxcox(fit, lambda = seq(-0.2, 0.2, by = 0.05), plotit = TRUE)
options(scipen = 1, digits = 4, width = 80)
# Two functions from hw09
Q_Q_plot = function(model, pointcol = "blue", linecol = "orange") {
qqnorm(resid(model),
col = pointcol,
pch = 20,
cex = 1)
qqline(resid(model),
col = linecol,
lwd = 2)
}
fitted_vs_resid = function(model, pointcol = "blue", linecol = "orange") {
plot(fitted(model), resid(model),
col = pointcol,
pch = 20,
cex = 1,
xlab = "Fitted",
ylab = "Residuals")
abline(h = 0, col = linecol, lwd = 2)
}
pikachu = data.frame(body = 13.4 * 0.453592)
exp(predict(log_log, pikachu, interval = "prediction", level = 0.99))
