model_lcavol = lm(lpsa ~ lcavol, data = prostate)
pfit_2 = lm(lpsa ~ lcavol + lweight, data = prostate)
pfit_3 = lm(lpsa ~ lcavol + lweight + svi, data = prostate)
pfit_4 = lm(lpsa ~ lcavol + lweight + svi + lbph, data = prostate)
library(faraway)
View(faraway)
model_all = lm(lpsa ~ ., data = prostate)
model_lcavol = lm(lpsa ~ lcavol, data = prostate)
pfit_2 = lm(lpsa ~ lcavol + lweight, data = prostate)
pfit_3 = lm(lpsa ~ lcavol + lweight + svi, data = prostate)
pfit_4 = lm(lpsa ~ lcavol + lweight + svi + lbph, data = prostate)
library(faraway)
View(prostate)
model_all = lm(lpsa ~ ., data = prostate)
model_lcavol = lm(lpsa ~ lcavol, data = prostate)
pfit_2 = lm(lpsa ~ lcavol + lweight, data = prostate)
pfit_3 = lm(lpsa ~ lcavol + lweight + svi, data = prostate)
pfit_4 = lm(lpsa ~ lcavol + lweight + svi + lbph, data = prostate)
library(faraway)
model_all    = lm(lpsa ~ .,                             data = prostate)
model_lcavol = lm(lpsa ~ lcavol,                        data = prostate)
model_3      = lm(lpsa ~ lcavol + lweight,              data = prostate)
model_4      = lm(lpsa ~ lcavol + lweight + age,        data = prostate)
model_5      = lm(lpsa ~ lcavol + lweight + age + lbph, data = prostate)
anova(model_lcavol, model_3)
library(faraway)
model_all    = lm(lpsa ~ .,                             data = prostate)
model_lcavol = lm(lpsa ~ lcavol,                        data = prostate)
model_3      = lm(lpsa ~ lcavol + lweight,              data = prostate)
model_4      = lm(lpsa ~ lcavol + lweight + age,        data = prostate)
model_5      = lm(lpsa ~ lcavol + lweight + age + lbph, data = prostate)
anova(model_lcavol, model_3)
anova(model_3, model_4)
anova(model_4, model_5)
anova(model_5, model_all)
library(faraway)
model_all    = lm(lpsa ~ .,                             data = prostate)
model_lcavol = lm(lpsa ~ lcavol,                        data = prostate)
model_3      = lm(lpsa ~ lcavol + lweight,              data = prostate)
model_4      = lm(lpsa ~ lcavol + lweight + age,        data = prostate)
model_5      = lm(lpsa ~ lcavol + lweight + age + lbph, data = prostate)
anova(model_lcavol, model_3)
anova(model_3, model_4)
anova(model_4, model_5)
anova(model_all, model_5)
library(faraway)
model_lcavol = lm(lpsa ~ lcavol, data = prostate)
model_3      = lm(lpsa ~ lcavol + lweight, data = prostate)
model_4      = lm(lpsa ~ lcavol + lweight + age, data = prostate)
model_5      = lm(lpsa ~ lcavol + lweight + age + lbph, data = prostate)
model_all    = lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45, data = prostate)
anova(model_all, model_5)
anova(model_5, model_all)
library(faraway)
model_lcavol = lm(lpsa ~ lcavol, data = prostate)
model_3      = lm(lpsa ~ lcavol + lweight, data = prostate)
model_4      = lm(lpsa ~ lcavol + lweight + age, data = prostate)
model_5      = lm(lpsa ~ lcavol + lweight + age + lbph, data = prostate)
model_all    = lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + gleason + pgg45, data = prostate)
anova(model_lcavol, model_3)
anova(model_3, model_4)
anova(model_4, model_5)
anova(model_5, model_all)
anova(model_lcavol, model_3)
anova(model_3, model_4)
anova(model_lcavol, model_3)
anova(model_3, model_4)
anova(model_4, model_5)
anova(model_5, model_all)
ï¼Ÿprostate
?prostate
anova(model_lcavol, model_3)
anova(model_3, model_4)
anova(model_4, model_5)
anova(model_5, model_all)
anova(model_3, model_4)
anova(model_4, model_5)
anova(model_5, model_all)
anova(model_3, model_5)
anova(model_3, model_5)
anova(model_3, model_all)
library(MASS)
set.seed(114)
train_index = sample(1:nrow(Boston), 400)
train_data  = Boston[train_index, ]
test_data   = Boston[!train_index, ]
library(MASS)
set.seed(114)
train_index = sample(1:nrow(Boston), 400)
train_data  = Boston[train_index, ]
test_data   = Boston[-train_index, ]
model_crime = lm(medv ~ crim, data = train_data)
model_2     = lm(medv ~ crim + tax + ptratio + black + lstat, data = train_data)
model_3     = lm(medv ~ crim + zn + chas + nox + tax + ptratio + black + lstat, data = train_data)
model_4     = lm(medv ~ crim + zn + chas + nox + rm + dis + rad + tax + ptratio + black + lstat, data = train_data)
model_all   = lm(medv ~ ., data = train_data)
# function to evaluate rmse
rmse  = function(actual, predicted) {
sqrt(mean((actual - predicted) ^ 2))
}
# calculate all train errors
train_error = c(
rmse(train_data$medv, predict(model_crime, train_data)),
rmse(train_data$medv, predict(model_2, train_data)),
rmse(train_data$medv, predict(model_3, train_data)),
rmse(train_data$medv, predict(model_4, train_data)),
rmse(train_data$medv, predict(model_all, train_data))
)
# calculate all test errors
test_error = c(
rmse(test_data$medv, predict(model_crime, test_data)),
rmse(test_data$medv, predict(model_2, test_data)),
rmse(test_data$medv, predict(model_3, test_data)),
rmse(test_data$medv, predict(model_4, test_data)),
rmse(test_data$medv, predict(model_all, test_data))
)
train_data  = Boston[train_index, ]
test_data   = Boston[-train_index, ]
model_crime = lm(medv ~ crim, data = train_data)
model_2     = lm(medv ~ crim + tax + ptratio + black + lstat, data = train_data)
model_3     = lm(medv ~ crim + zn + chas + nox + tax + ptratio + black + lstat, data = train_data)
model_4     = lm(medv ~ crim + zn + chas + nox + rm + dis + rad + tax + ptratio + black + lstat, data = train_data)
model_all   = lm(medv ~ ., data = train_data)
#
rmse = function(data, model) {
sqrt(mean((data - model) ^ 2))
}
# train_data
rmse(train_data$medv, predict(model_crime, train_data))
rmse(train_data$medv, predict(model_2, train_data))
rmse(train_data$medv, predict(model_3, train_data))
rmse(train_data$medv, predict(model_4, train_data))
rmse(train_data$medv, predict(model_all, train_data))
# test_data
rmse(test_data$medv, predict(model_crime, test_data))
rmse(test_data$medv, predict(model_2, test_data))
rmse(test_data$medv, predict(model_3, test_data))
rmse(test_data$medv, predict(model_4, test_data))
rmse(test_data$medv, predict(model_all, test_data))
?Boston
train_data  = Boston[train_index, ]
test_data   = Boston[-train_index, ]
model_crime = lm(medv ~ crim, data = train_data)
model_2     = lm(medv ~ crim + tax, data = train_data)
model_3     = lm(medv ~ crim + tax + black, data = train_data)
model_4     = lm(medv ~ crim + tax + black + lstat, data = train_data)
# rmse function
rmse = function(data, model) {
sqrt(mean((data - model) ^ 2))
}
# train_rmse
rmse(train_data$medv, predict(model_crime, train_data))
rmse(train_data$medv, predict(model_2, train_data))
rmse(train_data$medv, predict(model_3, train_data))
rmse(train_data$medv, predict(model_4, train_data))
rmse(train_data$medv, predict(model_all, train_data))
# test_rmse
rmse(test_data$medv, predict(model_crime, test_data))
rmse(test_data$medv, predict(model_2, test_data))
rmse(test_data$medv, predict(model_3, test_data))
rmse(test_data$medv, predict(model_4, test_data))
rmse(test_data$medv, predict(model_all, test_data))
train_data  = Boston[train_index, ]
test_data   = Boston[-train_index, ]
model_crime = lm(medv ~ crim, data = train_data)
model_2     = lm(medv ~ crim + tax, data = train_data)
model_3     = lm(medv ~ crim + tax + black, data = train_data)
model_4     = lm(medv ~ crim + tax + black + lstat, data = train_data)
# rmse function
rmse = function(data, model) {
sqrt(mean((data - model) ^ 2))
}
# train_rmse
rmse(train_data$medv, predict(model_crime, train_data))
rmse(train_data$medv, predict(model_2, train_data))
rmse(train_data$medv, predict(model_3, train_data))
rmse(train_data$medv, predict(model_4, train_data))
rmse(train_data$medv, predict(model_all, train_data))
# test_rmse
rmse(test_data$medv, predict(model_crime, test_data))
rmse(test_data$medv, predict(model_2, test_data))
rmse(test_data$medv, predict(model_3, test_data))
rmse(test_data$medv, predict(model_4, test_data))
rmse(test_data$medv, predict(model_all, test_data))
train_data  = Boston[train_index, ]
test_data   = Boston[-train_index, ]
model_crime = lm(medv ~ crim, data = train_data)
model_2     = lm(medv ~ crim + tax, data = train_data)
model_3     = lm(medv ~ crim + tax + black, data = train_data)
model_4     = lm(medv ~ crim + tax + black + lstat, data = train_data)
model_all   = lm(medv ~ ., data = train_data)
# rmse function
rmse = function(data, model) {
sqrt(mean((data - model) ^ 2))
}
# train_rmse
rmse(train_data$medv, predict(model_crime, train_data))
rmse(train_data$medv, predict(model_2, train_data))
rmse(train_data$medv, predict(model_3, train_data))
rmse(train_data$medv, predict(model_4, train_data))
rmse(train_data$medv, predict(model_all, train_data))
# test_rmse
rmse(test_data$medv, predict(model_crime, test_data))
rmse(test_data$medv, predict(model_2, test_data))
rmse(test_data$medv, predict(model_3, test_data))
rmse(test_data$medv, predict(model_4, test_data))
rmse(test_data$medv, predict(model_all, test_data))
set.seed(114)
n = 25
x0        = rep(1, n)
x1        = runif(n, 0, 10)
x2        = runif(n, 0, 10)
x3        = runif(n, 0, 10)
x4        = runif(n, 0, 10)
X         = cbind(x0, x1, x2, x3, x4)
C         = solve(t(X) %*% X)
y         = rep(0, n)
ex_4_data = data.frame(y, x1, x2, x3, x4)
diag(C)
ex_4_data[10, ]
diag(C)
ex_4_data[10, ]
diag(C)
ex_4_data[10,]
beta_hat_1=rep(0,1500)
beta_2_pval=rep(0,1500)
beta_3_pval=rep(0,1500)
beta_0 = 2
beta_1 = 3
beta_2 = 4
beta_3 = 0
beta_4 = 1
sigma  = 4
y_val  = beta_0 + beta_1 * x1 +beta_2 * x2 + beta_3 * x3 +beta_4 * x4
for(i in 1 : 1500) {
eps            = rnorm(n, 0, sigma)
ex_4_data$y    = y_val + eps
model          = lm(y ~ ., data = ex_4_data)
beta_hat_1[i]  = coef(fit)[2]
beta_2_pval[i] = tidy(fit)[3, ]$p.value
beta_3_pval[i] = tidy(fit)[4, ]$p.value
}
beta_0 = 2
beta_1 = 3
beta_2 = 4
beta_3 = 0
beta_4 = 1
sigma  = 4
y_val  = beta_0 + beta_1 * x1 +beta_2 * x2 + beta_3 * x3 +beta_4 * x4
for(i in 1 : 1500) {
eps            = rnorm(n, 0, sigma)
ex_4_data$y    = y_val + eps
model          = lm(y ~ ., data = ex_4_data)
(beta_hat_1[i]  = coef(model)[2])
(beta_2_pval[i] = tidy(model)[3, ]$p.value)
(beta_3_pval[i] = tidy(model)[4, ]$p.value)
}
beta_0 = 2
beta_1 = 3
beta_2 = 4
beta_3 = 0
beta_4 = 1
sigma  = 4
y_val  = beta_0 + beta_1 * x1 +beta_2 * x2 + beta_3 * x3 +beta_4 * x4
for(i in 1 : 1500) {
eps            = rnorm(n, 0, sigma)
ex_4_data$y    = y_val + eps
model          = lm(y ~ ., data = ex_4_data)
(beta_hat_1[i]  = coef(model)[2])
(beta_2_pval[i] = summary(model)[3, 4])
(beta_3_pval[i] = summary(model)[3, 4])
}
beta_0 = 2
beta_1 = 3
beta_2 = 4
beta_3 = 0
beta_4 = 1
sigma  = 4
y_val  = beta_0 + beta_1 * x1 +beta_2 * x2 + beta_3 * x3 +beta_4 * x4
for(i in 1 : 1500) {
eps            = rnorm(n, 0, sigma)
ex_4_data$y    = y_val + eps
model          = lm(y ~ ., data = ex_4_data)
(beta_hat_1[i]  = coef(model)[2])
(beta_2_pval[i] = summary(model)$coefficient[3, 4])
(beta_3_pval[i] = summary(model)$coefficient[3, 4])
}
?summary
?coefficients
?summary
mean(beta_hat_1)
var(beta_hat_1)
hist(beta_hat_1, prob = TRUE, breaks = 20,
xlab = expression(hat(beta)[1]),
main = "")
curve(dnorm(x, mean = beta_1, sd = sqrt(sigma ^ 2 * C[1 + 1, 1 + 1])),
add = TRUE,
lwd = 3)
mean(beta_3_pval < 0.05)
mean(beta_3_pval < 0.05)
mean(beta_2_pval < 0.05)
mean(beta_hat_1)
var(beta_hat_1)
mean(beta_3_pval < 0.05)
mean(beta_2_pval < 0.05)
beta_3_pval
mean(beta_3_pval < 0.05)
set.seed(114)
n = 25
x0        = rep(1, n)
x1        = runif(n, 0, 10)
x2        = runif(n, 0, 10)
x3        = runif(n, 0, 10)
x4        = runif(n, 0, 10)
X         = cbind(x0, x1, x2, x3, x4)
C         = solve(t(X) %*% X)
y         = rep(0, n)
ex_4_data = data.frame(y, x1, x2, x3, x4)
diag(C)
ex_4_data[10,]
beta_hat_1  = rep(0, 1500)
beta_2_pval = rep(0, 1500)
beta_3_pval = rep(0, 1500)
beta_0 = 2
beta_1 = 3
beta_2 = 4
beta_3 = 0
beta_4 = 1
sigma  = 4
y_val  = beta_0 + beta_1 * x1 +beta_2 * x2 + beta_3 * x3 +beta_4 * x4
for(i in 1 : 1500) {
eps            = rnorm(n, 0, sigma)
ex_4_data$y    = y_val + eps
model          = lm(y ~ ., data = ex_4_data)
beta_hat_1[i]  = coef(model)[2]
beta_2_pval[i] = summary(model)$coefficient[3, 4]
beta_3_pval[i] = summary(model)$coefficient[3, 4]
}
mean(beta_hat_1)
var(beta_hat_1)
hist(beta_hat_1, prob = TRUE, breaks = 20,
xlab = expression(hat(beta)[1]),
main = "")
curve(dnorm(x, mean = beta_1, sd = sqrt(sigma ^ 2 * C[1 + 1, 1 + 1])),
add = TRUE,
lwd = 3)
mean(beta_3_pval < 0.05)
mean(beta_2_pval < 0.05)
beta_0 = 2
beta_1 = 3
beta_2 = 4
beta_3 = 0
beta_4 = 1
sigma  = 4
y_val  = beta_0 + beta_1 * x1 +beta_2 * x2 + beta_3 * x3 +beta_4 * x4
for(i in 1 : 1500) {
eps            = rnorm(n, 0, sigma)
ex_4_data$y    = y_val + eps
model          = lm(y ~ ., data = ex_4_data)
beta_hat_1[i]  = coef(model)[2]
beta_2_pval[i] = summary(model)$coefficient[3, 4]
beta_3_pval[i] = summary(model)$coefficient[4, 4]
}
mean(beta_hat_1)
var(beta_hat_1)
mean(beta_hat_1)
var(beta_hat_1)
hist(beta_hat_1, prob = TRUE, breaks = 20,
xlab = expression(hat(beta)[1]),
main = "")
curve(dnorm(x, mean = beta_1, sd = sqrt(sigma ^ 2 * C[1 + 1, 1 + 1])),
add = TRUE,
lwd = 3)
mean(beta_3_pval < 0.05)
mean(beta_2_pval < 0.05)
dist = dnorm(x, mean = beta_1, sd = sqrt(var(beta_hat_1)))
library(fitdistrplus)
X
?fitdistrplus
??fitdistrplus
set.seed(42)
n = 25
x0        = rep(1, n)
x1        = runif(n, 0, 10)
x2        = runif(n, 0, 10)
x3        = runif(n, 0, 10)
x4        = runif(n, 0, 10)
X         = cbind(x0, x1, x2, x3, x4)
C         = solve(t(X) %*% X)
y         = rep(0, n)
ex_4_data = data.frame(y, x1, x2, x3, x4)
beta_hat_1  = rep(0, 1500)
beta_2_pval = rep(0, 1500)
beta_3_pval = rep(0, 1500)
beta_0 = 2
beta_1 = 3
beta_2 = 4
beta_3 = 0
beta_4 = 1
sigma  = 4
y_val  = beta_0 + beta_1 * x1 +beta_2 * x2 + beta_3 * x3 +beta_4 * x4
for(i in 1 : 1500) {
eps            = rnorm(n, 0, sigma)
ex_4_data$y    = y_val + eps
model          = lm(y ~ ., data = ex_4_data)
beta_hat_1[i]  = coef(model)[2]
beta_2_pval[i] = summary(model)$coefficient[3, 4]
beta_3_pval[i] = summary(model)$coefficient[4, 4]
}
mean(beta_hat_1)
var(beta_hat_1)
hist(beta_hat_1, prob = TRUE, breaks = 20,
xlab = expression(hat(beta)[1]),
main = "")
curve(dnorm(x, mean = beta_1, sd = sqrt(sigma ^ 2 * C[1 + 1, 1 + 1])),
add = TRUE,
lwd = 3)
mean(beta_3_pval < 0.05)
mean(beta_2_pval < 0.05)
C[1, 1]
View(C)
diag(C)
ex_4_data[10,]
diag(C)[2]
diag(C)[2,]
diag(C)[1,2]
diag(C)[0, 2]
diag(C)[2, 0]
diag(C)[2]
View(diag(C)[2])
diag(C)[2][1]
diag(C)[2]
C[1+1, 1+1]
beta_1
C[1+1, 1+1]
beta_1
16 * C[1 + 1, 1 + 1]
?Boston
??Boston
train_data  = Boston[train_index, ]
library(MASS)
set.seed(42)
train_index = sample(1:nrow(Boston), 400)
train_data  = Boston[train_index, ]
test_data   = Boston[-train_index, ]
model_crime = lm(medv ~ crim, data = train_data)
model_2     = lm(medv ~ crim + tax, data = train_data)
model_3     = lm(medv ~ crim + tax + black, data = train_data)
model_4     = lm(medv ~ crim + zn + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat, data = train_data)
model_all   = lm(medv ~ ., data = train_data)
# rmse function
rmse = function(data, model) {
sqrt(mean((data - model) ^ 2))
}
# train_rmse
rmse(train_data$medv, predict(model_crime, train_data))
rmse(train_data$medv, predict(model_2, train_data))
rmse(train_data$medv, predict(model_3, train_data))
rmse(train_data$medv, predict(model_4, train_data))
rmse(train_data$medv, predict(model_all, train_data))
# test_rmse
rmse(test_data$medv, predict(model_crime, test_data))
rmse(test_data$medv, predict(model_2, test_data))
rmse(test_data$medv, predict(model_3, test_data))
rmse(test_data$medv, predict(model_4, test_data))
rmse(test_data$medv, predict(model_all, test_data))
train_data  = Boston[train_index, ]
test_data   = Boston[-train_index, ]
model_crime = lm(medv ~ crim, data = train_data)
model_2     = lm(medv ~ crim + tax, data = train_data)
model_3     = lm(medv ~ crim + tax + black, data = train_data)
model_4     = lm(medv ~ crim + zn + indus + chas + nox + rm + dis + rad + tax + ptratio + black + lstat, data = train_data)
model_all   = lm(medv ~ ., data = train_data)
# rmse function
rmse = function(data, model) {
sqrt(mean((data - model) ^ 2))
}
# train_rmse
rmse(train_data$medv, predict(model_crime, train_data))
rmse(train_data$medv, predict(model_2, train_data))
rmse(train_data$medv, predict(model_3, train_data))
rmse(train_data$medv, predict(model_4, train_data))
rmse(train_data$medv, predict(model_all, train_data))
# test_rmse
rmse(test_data$medv, predict(model_crime, test_data))
rmse(test_data$medv, predict(model_2, test_data))
rmse(test_data$medv, predict(model_3, test_data))
rmse(test_data$medv, predict(model_4, test_data))
rmse(test_data$medv, predict(model_all, test_data))
train_data  = Boston[train_index, ]
test_data   = Boston[-train_index, ]
model_crime = lm(medv ~ crim, data = train_data)
model_2     = lm(medv ~ crim + tax, data = train_data)
model_3     = lm(medv ~ crim + tax + black, data = train_data)
model_4     = lm(medv ~ crim + zn + indus + chas + nox + rm + dis + rad + tax + ptratio + black + lstat, data = train_data)
model_all   = lm(medv ~ ., data = train_data)
# rmse function
rmse = function(data, model) {
sqrt(mean((data - model) ^ 2))
}
# train_rmse
rmse(train_data$medv, predict(model_crime, train_data))
rmse(train_data$medv, predict(model_2, train_data))
rmse(train_data$medv, predict(model_3, train_data))
rmse(train_data$medv, predict(model_4, train_data))
rmse(train_data$medv, predict(model_all, train_data))
# test_rmse
rmse(test_data$medv, predict(model_crime, test_data))
rmse(test_data$medv, predict(model_2, test_data))
rmse(test_data$medv, predict(model_3, test_data))
rmse(test_data$medv, predict(model_4, test_data))
rmse(test_data$medv, predict(model_all, test_data))
