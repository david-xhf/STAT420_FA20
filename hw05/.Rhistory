nutrition  = read.csv("nutrition.csv")
model      = lm(Calories ~ Carbs + Fat + Protein, data = nutrition)
null_model = lm(Calories ~ 1, data = nutrition)
anova_res  = anova(null_model, model)
nutrition   = read.csv("nutrition.csv")
nut_model   = lm(Calories ~ Carbs + Fat + Protein, data = nutrition)
summary(nut_model)
nutrition   = read.csv("nutrition.csv")
nut_model   = lm(Calories ~ Carbs + Fat + Protein, data = nutrition)
summary(nut_model)
coef(nut_model)
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)[2,1]
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)[2,1]
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)[1]
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)[2]
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)[1]
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)[1,1]
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)[1,0]
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)[1,]
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)[,1]
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)[1]
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)[2]
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)[3]
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)[1]
nutrition   = read.csv("nutrition.csv")
nut_model   = lm(Calories ~ Carbs + Fat + Protein, data = nutrition)
summary(nut_model)
coef(nut_model)
big_mac = data.frame(Carbs = 47, Fat = 28, Protein = 25)
predict(nut_model, newdata = big_mac)[1]
s_y = sd(nutrition$Calories)
s_y
s_y = sd(nutrition$Calories)
s_y
s_e = glance(nut_model)$sigma
s_y = sd(nutrition$Calories)
s_y
s_e = summary(nut_model)$sigma
s_e
predict(nut_model, newdata = data.frame(Carbs = 47, Fat = 28, Protein = 25))
predict(nut_model, newdata = data.frame(Carbs = 47, Fat = 28, Protein = 25))
summary(model)$r.squared
confint(nut_cfp, level = 0.90)
confint(nut_model, level = 0.90)
predict(nut_model, newdata = data.frame(Carbs = 30, Fat = 11, Protein = 2), interval = "confidence", level = 0.99)
predict(nut_cfp, newdata = data.frame(Carbs = 11, Fat = 1.5, Protein = 1), interval = "prediction", level = 0.90)
predict(nut_model, newdata = data.frame(Carbs = 11, Fat = 1.5, Protein = 1), interval = "prediction", level = 0.90)
nut_model2 = lm(Calories ~ Carbs + Sodium + Fat + Protein, data = nutrition)
summary(nut_model2)
nutrition   = read.csv("nutrition.csv")
nut_model   = lm(Calories ~ Carbs + Fat + Protein, data = nutrition)
summary(nut_model)
nut_model2 = lm(Calories ~ Carbs + Sodium + Fat + Protein, data = nutrition)
summary(nut_model2)
nut_model2 = lm(Calories ~ Carbs + Sodium + Fat + Protein, data = nutrition)
summary(nut_model2)
nut_model2 = lm(Calories ~ Carbs + Sodium + Fat + Protein, data = nutrition)
summary(nut_model2)
nut_model2 = lm(Calories ~ Carbs + Sodium + Fat + Protein, data = nutrition)
summary(nut_model2)
summary(model)$coef[1,]
summary(nut_model2)$coef[1,]
summary(nut_model2)$coef[2,] # Carbs as predictors
summary(nut_model2)$coef[3,] # Sodium as predictors
summary(nut_model2)$coef[4,] # Fat as predictors
summary(nut_model2)$coef[5,] # Protein as predictors
goalies_cleaned = read.csv("goalies_cleaned.csv")
goalies_model  = lm(W ~ ., data = goalies_cleaned)
summary(goalies_full)
goalies_cleaned = read.csv("goalies_cleaned.csv")
goalies_model  = lm(W ~ ., data = goalies_cleaned)
summary(goalies_model)
rmse = sqrt(mean(resid(goalies_full) ^ 2))
rmse = sqrt(mean(resid(goalies_model) ^ 2))
rmse
rmse = sqrt(mean(resid(goalies_model) ^ 2))
rmse
rse  = glance(model)$sigma
rmse = sqrt(mean(resid(goalies_model) ^ 2))
rmse
rse  = glance(goalies_model)$sigma
rmse = sqrt(mean(resid(goalies_model) ^ 2))
rmse
rse  = glance(goalies_model)$sigma
rmse = sqrt(mean(resid(goalies_model) ^ 2))
rmse
rse  = summary(goalies_model)$sigma
rse
goalies_mod1  = lm(W ~ GA + GAA + SV + SV_PCT, data = goalies_cleaned)
sqrt(mean(resid(goalies_mod1) ^ 2))
goalies_model_c  = lm(W ~ GA + GAA + SV + SV_PCT, data = goalies_cleaned)
rmse = sqrt(mean(resid(goalies_model_c) ^ 2))
rmse
goalies_mod2  = lm(W ~ GAA + SV_PCT, data = goalies_cleaned)
rmse = sqrt(mean(resid(goalies_mod2) ^ 2))
rmse
goalies_mod_d = lm(W ~ GAA + SV_PCT, data = goalies_cleaned)
rmse = sqrt(mean(resid(goalies_mod_d) ^ 2))
rmse
summary(nut_model)$r.squared
summary(nut_model)$r.squared
summary(nut_model)$r.squared
anova(goalies_model_d, goalies_model_c)
anova(goalies_model_d, goalies_model_c)
goalies_model_d = lm(W ~ GAA + SV_PCT, data = goalies_cleaned)
rmse = sqrt(mean(resid(goalies_model_d) ^ 2))
rmse
anova(goalies_model_d, goalies_model_c)
library(faraway)
n = nrow(prostate)
X = as.matrix(cbind(rep(1, n), prostate[,1-ncol(prostate)-1]))
y = prostate$lpsa
beta_hat_no_lm = as.vector(solve(t(X) %*% X) %*% t(X) %*% y)
sum(beta_hat_no_lm)
library(faraway)
X = as.matrix(cbind(rep(1, nrow(prostate)), prostate[, 1-ncol(prostate) - 1]))
y = prostate$lpsa
beta_hat_no_lm = as.vector(solve(t(X) %*% X) %*% t(X) %*% y)
sum(beta_hat_no_lm)
library(faraway)
X = as.matrix(cbind(rep(1, nrow(prostate)), prostate[, 1-ncol(prostate) - 1]))
y = prostate$lpsa
beta_hat_no_lm = as.vector(solve(t(X) %*% X) %*% t(X) %*% y)
sum(beta_hat_no_lm)
library(faraway)
row = nrow(prostate)
col = ncol(prostate)
X = as.matrix(cbind(rep(1, row), prostate[, 1 - col - 1]))
y = prostate$lpsa
beta_hat_no_lm = as.vector(solve(t(X) %*% X) %*% t(X) %*% y)
sum(beta_hat_no_lm)
library(faraway)
row = nrow(prostate)
col = ncol(prostate)
X = as.matrix(cbind(rep(1, row), prostate[, col]))
y = prostate$lpsa
beta_hat_no_lm = as.vector(solve(t(X) %*% X) %*% t(X) %*% y)
sum(beta_hat_no_lm)
library(faraway)
row = nrow(prostate)
col = ncol(prostate)
X = as.matrix(cbind(rep(1, row), prostate[, col]))
y = prostate$lpsa
beta_hat_no_lm = as.vector(solve(t(X) %*% X) %*% t(X) %*% y)
sum(beta_hat_no_lm)
library(faraway)
row = nrow(prostate)
col = ncol(prostate)
X = as.matrix(cbind(rep(1, row), prostate[, -col]))
y = prostate$lpsa
beta_hat_no_lm = as.vector(solve(t(X) %*% X) %*% t(X) %*% y)
sum(beta_hat_no_lm)
library(faraway)
row = nrow(prostate)
col = ncol(prostate)
X = as.matrix(cbind(rep(1, row), prostate[, -col]))
y = prostate$lpsa
beta_hat_no_lm = as.vector(solve(t(X) %*% X) %*% t(X) %*% y)
sum(beta_hat_no_lm)
library(faraway)
row = nrow(prostate)
col = ncol(prostate)
X = as.matrix(cbind(rep(1, row), prostate[, -col]))
y = prostate$lpsa
beta_hat_no_lm = as.vector(solve(t(X) %*% X) %*% t(X) %*% y)
sum(beta_hat_no_lm)
library(faraway)
row = nrow(prostate)
col = ncol(prostate)
X = as.matrix(cbind(rep(1, row), prostate[, -col]))
y = prostate$lpsa
beta_hat_no_lm = as.vector(solve(t(X) %*% X) %*% t(X) %*% y)
beta_hat_no_lm
sum(beta_hat_no_lm)
model = lm(lpsa ~ ., data = prostate)
(beta_hat_lm = as.vector(coef(model)))
model = lm(lpsa ~ ., data = prostate)
beta_hat_lm = as.vector(coef(model))
beta_hat_lm
prostate_model = lm(lpsa ~ ., data = prostate)
beta_hat_lm = as.vector(coef(prostate_model))
beta_hat_lm
prostate_model = lm(lpsa ~ ., data = prostate)
beta_hat_lm = as.vector(coef(prostate_model))
beta_hat_lm
sum(beta_hat_lm)
all.equal(beta_hat_lm,beta_hat_no_lm)
p     = length(coef(model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e = sqrt(t(e) %*% e / (n - p))
se
p     = length(coef(model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e = sqrt(t(e) %*% e / (n - p))
s_e
p     = length(coef(model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e = sqrt(t(e) %*% e / (n - p))
s_e[1]
p     = length(coef(model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e = sqrt(t(e) %*% e / (n - p))
s_e[1,1]
p     = length(coef(model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e = sqrt(t(e) %*% e / (n - p))
s_e
p     = length(coef(model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e = sqrt(t(e) %*% e / (n - p))
s_e
all.equal(s_e, summary(prostate_model)$sigma)
p     = length(coef(model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e = sqrt(t(e) %*% e / (n - p))
s_e
all.equal(s_e, summary(prostate_model)$sigma)
p     = length(coef(prostate_model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e = sqrt(t(e) %*% e / (n - p))
s_e
all.equal(s_e[1], summary(prostate_model)$sigma)
p     = length(coef(prostate_model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e = sqrt(t(e) %*% e / (n - p))
s_e[1]
all.equal(s_e[1], summary(prostate_model)$sigma)
p     = length(coef(prostate_model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e = as.vector((sqrt(t(e) %*% e / (n - p)))
s_e
p     = length(coef(prostate_model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e = (sqrt(t(e) %*% e / (n - p))
s_e
p     = length(coef(prostate_model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e = (sqrt(t(e) %*% e / (n - p)))
s_e
all.equal(s_e, summary(prostate_model)$sigma)
p     = length(coef(prostate_model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e = as.vector((sqrt(t(e) %*% e / (n - p))))
s_e
all.equal(s_e, summary(prostate_model)$sigma)
SST   = sum((y - mean(y)) ^ 2)
SSReg = sum((y_hat - mean(y)) ^ 2)
R2    = SSReg / SST
R2
SST   = sum((y - mean(y)) ^ 2)
SSReg = sum((y_hat - mean(y)) ^ 2)
R2    = SSReg / SST
R2
all.equal(R2, summary(model)$r.squared)
p     = length(coef(prostate_model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e   = as.vector((sqrt(t(e) %*% e / (n - p))))
s_e
all.equal(s_e, summary(prostate_model)$sigma)
p     = length(coef(prostate_model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e   = as.vector((sqrt(t(e) %*% e / (row - p))))
s_e
all.equal(s_e, summary(prostate_model)$sigma)
p     = length(coef(prostate_model))
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e   = as.vector((sqrt(t(e) %*% e / (row - p))))
s_e
all.equal(s_e, summary(prostate_model)$sigma)
SST   = sum((y - mean(y)) ^ 2)
SSReg = sum((y_hat - mean(y)) ^ 2)
R2    = SSReg / SST
R2
all.equal(R2, summary(prostate_model)$r.squared)
View(e)
length(coef(prostate_model))
nrow(goalies_cleaned)
ncol(goalies_cleaned)
View(goalies_cleaned)
p     = length(beta_hat_no_lm)
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
s_e   = as.vector((sqrt(t(e) %*% e / (row - p))))
s_e
all.equal(s_e, summary(prostate_model)$sigma)
predict(nut_model, newdata = data.frame(Carbs = 30, Fat = 11, Protein = 2), interval = "confidence", level = 0.99)
predict(nut_model, newdata = data.frame(Carbs = 30, Fat = 11, Protein = 2), interval = "confidence", level = 0.99)
confint(nut_model, level = 0.95)[1,]
predict(nut_model, newdata = data.frame(Carbs = 11, Fat = 1.5, Protein = 1), interval = "prediction", level = 0.90)
